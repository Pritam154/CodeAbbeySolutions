#input
# 20
# 1777930954809416587147660791784794314784432111526800706093789579403138960940165075820050317562202766948028237512
# 5689768398165682472981133878451278523009637608647762675604795738876774718113916506327804992150205611581315356832469416472592015530113139666919895048261416544213718823613767148595520981851577168
# 1593326225701717188334037111425359127138512324945743711294024460075377172985524819472680355872170395569016093752628516876254232560412670420129021724057156769422272151448461996634558399312613
# 668996615388005031531000081241745415306766517246774551964595292186469
# 2830653773025598082345063352442424920351144475210443140761432888315880232178889808908956305371077582723774166955957876499339886412043139544385164571854387045842521
# 897889194859191704881857622613605161659692872156509128465291624947856903121114331700554055405737435019936805984303748490745
# 5789092068864820527338372482892113982249794889765
# 102334155
# 132980473367242282497284673037549604307310746277363901731233717012104672704818538889393037469151708867132489255106919564710136837304160825061948265664510600390158933
# 167889621328187018603839571160601156165718032465198173590271441192035550962902993642892477664171488276167058117358975773751425901845612997090658
# 11111460156937785151929026842503960837766832936
# 187341518601536966291015050946540312701895836604078191803255601777
# 43566776258854844738105
# 10108265416152526419683994794618270268165872518704428380856874159529924875319101159659894110659650591571332238987107046525767189192225493851401061174799065698263103347
# 40232462861844090389128434238541564732364078131780448061576898306103009199405081373822175980623530127985951663375242165249073319332045062588388761317543568249014325104512245165644739010
# 4953967011875066473162524925231604047727791871346061001150551747313593851366517214899257280600
# 3516470258181436632779942061407967017889567600656021732351687343954813226146279635109807764516348660489138275647928031738863616520008909996193084872671097173635385035177795631888400653504011257
# 941390895042587567453271223806288165311401367715034229502159202
# 1645645409178311156114050175340179094658577397657624573049761120640548215334513341070281
# 139423224561697880139724382870407283950070256587697307264108962948325571622863290691557658876222521294125

def find_fib(fib_numbers, num):
  while True:
    a, b = fib_numbers[-2:]
    c = a + b
    fib_numbers.append(c)

    if num == c:
      break

n = int(input())

fib_numbers = [0, 1]

for i in range(0, n):
  num = int(input())
  if num not in fib_numbers:
    find_fib(fib_numbers, num)
  print(fib_numbers.index(num), "", end="")